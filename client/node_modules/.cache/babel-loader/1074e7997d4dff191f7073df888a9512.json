{"ast":null,"code":"var _jsxFileName = \"/Users/Hansi/Desktop/gardener/client/src/components/ProjectInfo.js\";\nimport React, { useState, useContext, Fragment, useEffect } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\nimport JsonActivities, { cleanComments } from \"../utilities/JsonActivities\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\nimport { Comments } from \"./Comments\";\n\nconst ProjectInfo = ({\n  toggleProject\n}) => {\n  let newComment;\n  const {\n    value,\n    setValue\n  } = useContext(GlobalContext);\n  const [commentsRendered, setCommentsRendered] = useState([]);\n  const {\n    viewProject,\n    setViewProject\n  } = useContext(ProjectContext);\n  let id = value.gy.id;\n  let view;\n  let proj = viewProject;\n  let recentlyAddedComment = false;\n\n  const renderComments = arr => {\n    let fetchedComments = arr.map(it => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, it[\"comment\"])));\n    console.log(fetchedComments);\n    setCommentsRendered(fetchedComments);\n  };\n\n  const getComments = async () => {\n    try {\n      await fetch(`http://138.68.88.7:5000/comments/${id}/${proj[\"project_id\"]}`).then(res => res.json()).then(json => renderComments(json));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const addComment = async () => {\n    newComment = document.getElementById(\"project-textarea\").value;\n    let ser = proj.project_id;\n\n    try {\n      const body = {\n        id,\n        ser,\n        newComment\n      };\n      console.log(body);\n      const response = await fetch(`http://138.68.88.7:5000/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      recentlyAddedComment = true;\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getComments();\n    recentlyAddedComment = false;\n  }, [viewProject || recentlyAddedComment == true]);\n\n  if (proj) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"project-info-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"project-title-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, proj.project_title)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"project-descr-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"Tilleggsinformasjon\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"project-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, proj.project_descr)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"project-completion-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment-list-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, \"Kommentarer\"), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"comment-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, commentsRendered), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      classname: \"comment-textarea\",\n      id: \"project-textarea\",\n      placeholder: \"Skriv en kommentar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: addComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"Add\")));\n  } else return null;\n};\n\nexport default ProjectInfo;","map":{"version":3,"sources":["/Users/Hansi/Desktop/gardener/client/src/components/ProjectInfo.js"],"names":["React","useState","useContext","Fragment","useEffect","GlobalContext","GlobalEdit","JsonActivities","cleanComments","ProjectContext","Comments","ProjectInfo","toggleProject","newComment","value","setValue","commentsRendered","setCommentsRendered","viewProject","setViewProject","id","gy","view","proj","recentlyAddedComment","renderComments","arr","fetchedComments","map","it","console","log","getComments","fetch","then","res","json","err","error","message","addComment","document","getElementById","ser","project_id","body","response","method","headers","JSON","stringify","project_title","project_descr"],"mappings":"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","sourcesContent":["import React, { useState, useContext, Fragment, useEffect } from \"react\";\n\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\n\nimport JsonActivities, { cleanComments } from \"../utilities/JsonActivities\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\nimport {Comments} from \"./Comments\";\n\nconst ProjectInfo = ({ toggleProject }) => {\n  let newComment;\n  const { value, setValue } = useContext(GlobalContext);\n  const [commentsRendered, setCommentsRendered] = useState([]);\n  const { viewProject, setViewProject } = useContext(ProjectContext);\n\n  let id = value.gy.id;\n  let view;\n  let proj = viewProject;\n  let recentlyAddedComment = false;\n\n  const renderComments = (arr) => {\n    let fetchedComments = arr.map((it) => (\n      <li>\n        <p>{it[\"comment\"]}</p>\n      </li>\n    ));\n    console.log(fetchedComments);\n    setCommentsRendered(fetchedComments);\n  };\n  const getComments = async () => {\n    try {\n      await fetch(`http://138.68.88.7:5000/comments/${id}/${proj[\"project_id\"]}`)\n        .then((res) => res.json())\n        .then((json) => renderComments(json));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const addComment = async () => {\n    newComment = document.getElementById(\"project-textarea\").value;\n    let ser = proj.project_id;\n    try {\n      const body = {\n        id,\n        ser,\n        newComment,\n      };\n      console.log(body);\n      const response = await fetch(`http://138.68.88.7:5000/comments`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n      recentlyAddedComment = true;\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getComments();\n    recentlyAddedComment = false;\n  }, [viewProject || recentlyAddedComment==true])\n\n  if (proj) {\n    return (\n      <div className=\"project-info-container\">\n        <div className=\"project-title-container\">\n          <p>{proj.project_title}</p>\n        </div>\n        <div className=\"project-descr-container\">\n          <p>Tilleggsinformasjon</p>\n          <p className=\"project-description\">{proj.project_descr}</p>\n        </div>\n        <div className=\"project-completion-container\"></div>\n        <div className=\"comment-list-container\">\n          <p>Kommentarer</p>\n          <ul className=\"comment-list\">{commentsRendered}</ul>\n          <div>\n            <textarea\n              classname=\"comment-textarea\"\n              id=\"project-textarea\"\n              placeholder=\"Skriv en kommentar\"\n            ></textarea>\n          </div>\n          <div onClick={addComment}>Add</div>\n        </div>\n      </div>\n    );\n  } else return null;\n};\n\nexport default ProjectInfo;\n"]},"metadata":{},"sourceType":"module"}