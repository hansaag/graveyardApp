{"ast":null,"code":"var _jsxFileName = \"/Users/Hansi/Desktop/gardener/client/src/components/Comments.js\";\nimport React, { useState, useContext, Fragment, useEffect } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\nimport JsonActivities, { cleanComments } from \"../utilities/JsonActivities\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\nexport const Comments = () => {\n  const {\n    viewProject,\n    setViewProject\n  } = useContext(ProjectContext);\n  const {\n    value,\n    setValue\n  } = useContext(GlobalContext);\n  let fetchedComments = [];\n  let id = value.gy.id;\n  let proj = viewProject;\n\n  const renderComments = arr => {\n    fetchedComments = arr.map(it => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }, it[\"comment\"])));\n    console.log(fetchedComments);\n    return fetchedComments;\n  };\n\n  const getComments = async () => {\n    try {\n      await fetch(`http://138.68.88.7:5000/comments/${id}/${proj[\"project_id\"]}`).then(res => res.json()).then(json => renderComments(json));\n\n      if (fetchedComments.length == 0) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"empty-comments\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 18\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"full-comments\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 24\n          }\n        }, fetchedComments);\n      }\n\n      ;\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/Hansi/Desktop/gardener/client/src/components/Comments.js"],"names":["React","useState","useContext","Fragment","useEffect","GlobalContext","GlobalEdit","JsonActivities","cleanComments","ProjectContext","Comments","viewProject","setViewProject","value","setValue","fetchedComments","id","gy","proj","renderComments","arr","map","it","console","log","getComments","fetch","then","res","json","length","err","error","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,QAAtC,EAAgDC,SAAhD,QAAiE,OAAjE;AAEA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA,OAAOC,cAAP,IAAyBC,aAAzB,QAA8C,6BAA9C;AACA,SAASC,cAAT,QAA+B,4BAA/B;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCV,UAAU,CAACO,cAAD,CAAlD;AACA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBZ,UAAU,CAACG,aAAD,CAAtC;AACA,MAAIU,eAAe,GAAG,EAAtB;AAEA,MAAIC,EAAE,GAAGH,KAAK,CAACI,EAAN,CAASD,EAAlB;AACA,MAAIE,IAAI,GAAGP,WAAX;;AAEA,QAAMQ,cAAc,GAAIC,GAAD,IAAS;AAC9BL,IAAAA,eAAe,GAAGK,GAAG,CAACC,GAAJ,CAASC,EAAD,iBACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,EAAE,CAAC,SAAD,CAAN,CADF,CADgB,CAAlB;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,eAAZ;AACA,WAAOA,eAAP;AACD,GARD;;AASA,QAAMU,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,KAAK,CAAE,oCAAmCV,EAAG,IAAGE,IAAI,CAAC,YAAD,CAAe,EAA9D,CAAL,CACHS,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGE,IAAD,IAAUV,cAAc,CAACU,IAAD,CAF1B,CAAN;;AAIE,UAAId,eAAe,CAACe,MAAhB,IAA0B,CAA9B,EAAgC;AAC9B,4BAAO;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAEO;AAAC,4BAAO;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgCf,eAAhC,CAAP;AAA8D;;AAAA;AAEzE,KATD,CASE,OAAOgB,GAAP,EAAY;AACZR,MAAAA,OAAO,CAACS,KAAR,CAAcD,GAAG,CAACE,OAAlB;AACD;AACF,GAbD;AAcD,CA/BM","sourcesContent":["import React, { useState, useContext, Fragment, useEffect } from \"react\";\n\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\n\nimport JsonActivities, { cleanComments } from \"../utilities/JsonActivities\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\n\nexport const Comments = () => {\n  const { viewProject, setViewProject } = useContext(ProjectContext);\n  const { value, setValue } = useContext(GlobalContext);\n  let fetchedComments = [];\n\n  let id = value.gy.id;\n  let proj = viewProject;\n\n  const renderComments = (arr) => {\n    fetchedComments = arr.map((it) => (\n      <li>\n        <p>{it[\"comment\"]}</p>\n      </li>\n    ));\n    console.log(fetchedComments);\n    return fetchedComments;\n  };\n  const getComments = async () => {\n    try {\n      await fetch(`http://138.68.88.7:5000/comments/${id}/${proj[\"project_id\"]}`)\n        .then((res) => res.json())\n        .then((json) => renderComments(json));\n\n        if (fetchedComments.length == 0){\n          return <div className=\"empty-comments\"></div>\n        } else {return <div className=\"full-comments\">{fetchedComments}</div>};\n      \n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n}\n  \n\n  \n"]},"metadata":{},"sourceType":"module"}