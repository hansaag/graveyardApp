{"ast":null,"code":"var _jsxFileName = \"/home/hans/dev/personlig/graveyardApp/client/src/components/Fields.js\";\nimport React, { useState, useContext, Fragment, useEffect } from \"react\";\nimport MenuFieldButton from \"./MenuFieldButton\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { fieldActivities } from \"../utilities/GraveyardInfo\";\nimport { ActivityViewContext } from \"../contexts/ActivityViewContext\";\nimport { CriticalFieldsContext } from \"../contexts/CriticalFieldsContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\nimport { lightDates } from \"../utilities/JsonActivities\";\nimport { chosenConnection } from \"../utilities/Connections\";\nimport trash from \"../images/bin.png\";\n\nconst Fields = ({\n  fields\n}) => {\n  const {\n    value,\n    setValue\n  } = useContext(GlobalContext);\n  const {\n    selectedActivity,\n    setSelectedActivity\n  } = useContext(ActivityViewContext);\n  const {\n    edit,\n    setEdit\n  } = useContext(GlobalEdit);\n  const [showList, setShowList] = useState(false);\n  const [criticalDates, setCriticalDates] = useState([]);\n\n  const setDates = items => {\n    setCriticalDates(items);\n  };\n\n  const handleActivitySelectorClick = () => {\n    setShowList(!showList);\n  };\n\n  const selectActivityClick = async (item, name) => {\n    setSelectedActivity(item);\n    setShowList(false);\n\n    try {\n      await fetch(`${chosenConnection}/fields/${value.gy.id}`).then(res => res.json()).then(items => lightDates(items, name)).then(items => setDates(items));\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    setShowList(false);\n    setSelectedActivity(null);\n    setCriticalDates([]);\n  }, [edit]);\n  const currentFields = fields.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: \"field-list-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MenuFieldButton, {\n    item: item,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  })));\n  const activityList = fieldActivities.map((item, index) => {\n    if (index < 6) {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: \"activity-selector-li\",\n        key: index,\n        onClick: () => selectActivityClick(item, fieldActivities[index].dbValue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: item.img,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }));\n    }\n  });\n  /* if a user has toggled the 'visning' box to show a list of different\n  activities for each field */\n\n  if (showList) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fields-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `activity-selector-list-container ${showList ? \"show-list\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CriticalFieldsContext.Provider, {\n      value: {\n        criticalDates,\n        setCriticalDates\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"activity-selector-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, activityList))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"activity-selector\",\n      onClick: handleActivitySelectorClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"Visning\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: `remove-activity ${selectedActivity ? \"show\" : \"\"}`,\n      onClick: () => setSelectedActivity(null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"remove-activity-img\",\n      src: trash,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }), \" \")));\n    /* if no specific activity is selected and the user has not toggled\n    the 'visning' box */\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fields-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CriticalFieldsContext.Provider, {\n      value: {\n        criticalDates,\n        setCriticalDates\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"fields-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, currentFields)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"activity-selector\",\n      onClick: handleActivitySelectorClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"Visning\"), selectActivity == true ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"activity-selector-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: selectedActivity ? selectedActivity.img : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"activity-selector-icon-empty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, \"+\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: `activity-selector-list-container ${showList ? \"show-list\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"activity-selector-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, activityList)));\n    /* if a user has selected an activity, the 'visning' box should\n    reflect that activity and fields should be colored by completed \n    date of the activity */\n  }\n};\n\nexport default Fields;","map":{"version":3,"sources":["/home/hans/dev/personlig/graveyardApp/client/src/components/Fields.js"],"names":["React","useState","useContext","Fragment","useEffect","MenuFieldButton","GlobalContext","fieldActivities","ActivityViewContext","CriticalFieldsContext","GlobalEdit","lightDates","chosenConnection","trash","Fields","fields","value","setValue","selectedActivity","setSelectedActivity","edit","setEdit","showList","setShowList","criticalDates","setCriticalDates","setDates","items","handleActivitySelectorClick","selectActivityClick","item","name","fetch","gy","id","then","res","json","err","console","error","message","currentFields","map","index","activityList","dbValue","img","selectActivity"],"mappings":"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","sourcesContent":["import React, { useState, useContext, Fragment, useEffect } from \"react\";\n\nimport MenuFieldButton from \"./MenuFieldButton\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { fieldActivities } from \"../utilities/GraveyardInfo\";\nimport { ActivityViewContext } from \"../contexts/ActivityViewContext\";\nimport { CriticalFieldsContext } from \"../contexts/CriticalFieldsContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\nimport { lightDates } from \"../utilities/JsonActivities\";\nimport { chosenConnection } from \"../utilities/Connections\";\n\nimport trash from \"../images/bin.png\";\n\nconst Fields = ({ fields }) => {\n  const { value, setValue } = useContext(GlobalContext);\n  const { selectedActivity, setSelectedActivity } =\n    useContext(ActivityViewContext);\n\n  const { edit, setEdit } = useContext(GlobalEdit);\n  const [showList, setShowList] = useState(false);\n  const [criticalDates, setCriticalDates] = useState([]);\n\n  const setDates = (items) => {\n    setCriticalDates(items);\n  };\n\n  const handleActivitySelectorClick = () => {\n    setShowList(!showList);\n  };\n\n  const selectActivityClick = async (item, name) => {\n    setSelectedActivity(item);\n    setShowList(false);\n\n    try {\n      await fetch(`${chosenConnection}/fields/${value.gy.id}`)\n        .then((res) => res.json())\n        .then((items) => lightDates(items, name))\n        .then((items) => setDates(items));\n\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  \n\n  useEffect(() => {\n    setShowList(false);\n    setSelectedActivity(null);\n    setCriticalDates([]);\n  }, [edit]);\n\n  const currentFields = fields.map((item, index) => (\n    <li className=\"field-list-item\">\n      <MenuFieldButton item={item} index={index} />\n    </li>\n  ));\n\n  const activityList = fieldActivities.map((item, index) => {\n    if (index < 6) {\n      return (\n        <li\n          className=\"activity-selector-li\"\n          key={index}\n          onClick={() =>\n            selectActivityClick(item, fieldActivities[index].dbValue)\n          }\n        >\n          <img src={item.img} />\n        </li>\n      );\n    }\n  });\n\n  /* if a user has toggled the 'visning' box to show a list of different\n  activities for each field */\n\n  if (showList) {\n    return (\n      <div className=\"fields-box\">\n        <div\n          className={`activity-selector-list-container ${\n            showList ? \"show-list\" : \"\"\n          }`}\n        >\n          <CriticalFieldsContext.Provider\n            value={{ criticalDates, setCriticalDates }}\n          >\n            <ul className=\"activity-selector-list\">{activityList}</ul>\n          </CriticalFieldsContext.Provider>\n        </div>\n        <div\n          className=\"activity-selector\"\n          onClick={handleActivitySelectorClick}\n        >\n          <h5>Visning</h5>\n          <div\n            className={`remove-activity ${selectedActivity ? \"show\" : \"\"}`}\n            onClick={() => setSelectedActivity(null)}\n          >\n            <img className=\"remove-activity-img\" src={trash} />{\" \"}\n          </div>\n        </div>\n      </div>\n    );\n\n  /* if no specific activity is selected and the user has not toggled\n  the 'visning' box */\n  \n  } else {\n    return (\n      <div className=\"fields-box\">\n        <CriticalFieldsContext.Provider\n          value={{ criticalDates, setCriticalDates }}\n        >\n          <ul className=\"fields-list\">{currentFields}</ul>\n        </CriticalFieldsContext.Provider>\n\n        <div\n          className=\"activity-selector\"\n          onClick={handleActivitySelectorClick}\n        >\n          <h5>Visning</h5>\n          {selectActivity == true ? <div className=\"activity-selector-icon\">\n            <img src={selectedActivity ? selectedActivity.img : null} />\n          </div> :\n          <div className=\"activity-selector-icon-empty\">+</div>}\n        </div>\n        <div\n          className={`activity-selector-list-container ${\n            showList ? \"show-list\" : \"\"\n          }`}\n        >\n          <ul className=\"activity-selector-list\">{activityList}</ul>\n        </div>\n      </div>\n    );\n\n  /* if a user has selected an activity, the 'visning' box should\n  reflect that activity and fields should be colored by completed \n  date of the activity */\n        }\n};\n\nexport default Fields;\n"]},"metadata":{},"sourceType":"module"}