{"ast":null,"code":"var _jsxFileName = \"/mnt/d/web/graveyardApp/client/src/components/Activities.js\";\nimport React, { useState, useContext, Fragment, useCallback, useEffect } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\nimport JsonActivities, { cleanProjects } from \"../utilities/JsonActivities\";\nimport ProjectInfo from \"./ProjectInfo\";\n\nconst Activities = () => {\n  const {\n    value,\n    setValue\n  } = useContext(GlobalContext);\n  const [activities, setActivities] = useState([]);\n  const {\n    viewProject,\n    setViewProject\n  } = useContext(ProjectContext);\n  const [buttonIndex, setButtonIndex] = useState(null);\n  let projectContainer;\n  let currentProjectIndex;\n  const getProjectData = useCallback(projArr => {\n    projectContainer = projArr;\n    console.log(projectContainer);\n    return projArr;\n  });\n\n  const toggleProject = (activity, index) => {\n    console.log(activity);\n\n    if (activity != viewProject) {\n      setViewProject(activity);\n      setButtonIndex(index);\n    } else {\n      setViewProject(null);\n      setButtonIndex(null);\n    }\n  };\n\n  useEffect(() => {\n    fetch(`http://138.68.88.7:5000/projects/${value.gy.id}`).then(response => response.json()).then(sendData => getProjectData(sendData)).then(cleaned => setActivities(cleaned));\n  }, [value.gy.id]);\n  const fields = activities.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: `activity-list-item ${buttonIndex === index ? \"highligt-activity\" : \"\"}`,\n    onClick: () => toggleProject(activities[index], index),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"activity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, item.project_title)));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    classname: \"activity-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"activity-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, fields), /*#__PURE__*/React.createElement(ProjectInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Activities;","map":{"version":3,"sources":["/mnt/d/web/graveyardApp/client/src/components/Activities.js"],"names":["React","useState","useContext","Fragment","useCallback","useEffect","GlobalContext","ProjectContext","JsonActivities","cleanProjects","ProjectInfo","Activities","value","setValue","activities","setActivities","viewProject","setViewProject","buttonIndex","setButtonIndex","projectContainer","currentProjectIndex","getProjectData","projArr","console","log","toggleProject","activity","index","fetch","gy","id","then","response","json","sendData","cleaned","fields","map","item","project_title"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,SALF,QAMO,OANP;AAOA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,cAAT,QAA+B,4BAA/B;AAEA,OAAOC,cAAP,IAAyBC,aAAzB,QAA8C,6BAA9C;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBX,UAAU,CAACI,aAAD,CAAtC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAEe,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCf,UAAU,CAACK,cAAD,CAAlD;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,IAAD,CAA9C;AAEA,MAAImB,gBAAJ;AAEA,MAAIC,mBAAJ;AAEA,QAAMC,cAAc,GAAGlB,WAAW,CAAEmB,OAAD,IAAa;AAC9CH,IAAAA,gBAAgB,GAAGG,OAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,gBAAZ;AACA,WAAOG,OAAP;AACD,GAJiC,CAAlC;;AAMA,QAAMG,aAAa,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzCJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;;AACA,QAAIA,QAAQ,IAAIX,WAAhB,EAA6B;AAC3BC,MAAAA,cAAc,CAACU,QAAD,CAAd;AACAR,MAAAA,cAAc,CAACS,KAAD,CAAd;AACD,KAHD,MAGO;AACLX,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GATD;;AAWAd,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,KAAK,CAAE,oCAAmCjB,KAAK,CAACkB,EAAN,CAASC,EAAG,EAAjD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,QAAD,IAAcb,cAAc,CAACa,QAAD,CAFpC,EAGGH,IAHH,CAGSI,OAAD,IAAarB,aAAa,CAACqB,OAAD,CAHlC;AAID,GALQ,EAKN,CAACxB,KAAK,CAACkB,EAAN,CAASC,EAAV,CALM,CAAT;AAOA,QAAMM,MAAM,GAAGvB,UAAU,CAACwB,GAAX,CAAe,CAACC,IAAD,EAAOX,KAAP,kBAC5B;AACE,IAAA,SAAS,EAAG,sBACVV,WAAW,KAAKU,KAAhB,GAAwB,mBAAxB,GAA8C,EAC/C,EAHH;AAIE,IAAA,OAAO,EAAE,MAAMF,aAAa,CAACZ,UAAU,CAACc,KAAD,CAAX,EAAoBA,KAApB,CAJ9B;AAKE,IAAA,GAAG,EAAEA,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBW,IAAI,CAACC,aAA9B,CAPF,CADa,CAAf;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BH,MAA/B,CADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CApDD;;AAsDA,eAAe1B,UAAf","sourcesContent":["import React, {\n  useState,\n  useContext,\n  Fragment,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\n\nimport JsonActivities, { cleanProjects } from \"../utilities/JsonActivities\";\nimport ProjectInfo from \"./ProjectInfo\";\n\nconst Activities = () => {\n  const { value, setValue } = useContext(GlobalContext);\n  const [activities, setActivities] = useState([]);\n  const { viewProject, setViewProject } = useContext(ProjectContext);\n  const [buttonIndex, setButtonIndex] = useState(null);\n\n  let projectContainer;\n\n  let currentProjectIndex;\n\n  const getProjectData = useCallback((projArr) => {\n    projectContainer = projArr;\n    console.log(projectContainer);\n    return projArr;\n  });\n\n  const toggleProject = (activity, index) => {\n    console.log(activity);\n    if (activity != viewProject) {\n      setViewProject(activity);\n      setButtonIndex(index);\n    } else {\n      setViewProject(null);\n      setButtonIndex(null);\n    }\n  };\n\n  useEffect(() => {\n    fetch(`http://138.68.88.7:5000/projects/${value.gy.id}`)\n      .then((response) => response.json())\n      .then((sendData) => getProjectData(sendData))\n      .then((cleaned) => setActivities(cleaned));\n  }, [value.gy.id]);\n\n  const fields = activities.map((item, index) => (\n    <li\n      className={`activity-list-item ${\n        buttonIndex === index ? \"highligt-activity\" : \"\"\n      }`}\n      onClick={() => toggleProject(activities[index], index)}\n      key={index}\n    >\n      <a className=\"activity\">{item.project_title}</a>\n    </li>\n  ));\n\n  return (\n    <div classname=\"activity-holder\">\n      <ul className=\"activity-list\">{fields}</ul>\n      <ProjectInfo />\n    </div>\n  );\n};\n\nexport default Activities;\n"]},"metadata":{},"sourceType":"module"}