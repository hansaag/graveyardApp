{"ast":null,"code":"var _jsxFileName = \"/home/hans/dev/personlig/graveyardApp/client/src/components/Activities.js\";\nimport React, { useState, useContext, Fragment, useCallback, useEffect } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\nimport JsonActivities, { cleanProjects } from \"../utilities/JsonActivities\";\nimport ProjectInfo from \"./ProjectInfo\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\nimport { chosenConnection } from \"../utilities/Connections\";\nimport checkMark from \"../images/tick.png\";\n\nconst Activities = () => {\n  const {\n    value,\n    setValue\n  } = useContext(GlobalContext);\n  const [activities, setActivities] = useState([]);\n  const {\n    viewProject,\n    setViewProject\n  } = useContext(ProjectContext);\n  const [buttonIndex, setButtonIndex] = useState(null);\n  const {\n    edit,\n    setEdit\n  } = useContext(GlobalEdit);\n  let projectContainer;\n  const getProjectData = useCallback(projArr => {\n    projectContainer = projArr;\n    console.log(projectContainer);\n    return projArr;\n  });\n  const updateLocalProjectValue = useCallback((item, value) => {\n    item[\"percent_finished\"] = value;\n    console.log(item);\n  });\n\n  const toggleProject = (activity, index) => {\n    console.log(activity);\n\n    if (activity != viewProject) {\n      setViewProject(activity);\n      setButtonIndex(index);\n    } else {\n      setViewProject(null);\n      setButtonIndex(null);\n    }\n  };\n\n  useEffect(() => {\n    fetch(`${chosenConnection}/projects/${value.gy.id}`).then(response => response.json()).then(sendData => getProjectData(sendData)).then(cleaned => setActivities(cleaned));\n  }, [value.gy.id || edit]);\n  const fields = activities.map((item, index) => {\n    if (item.date_completed) return /*#__PURE__*/React.createElement(\"li\", {\n      className: `activity-list-item finished-project\n      ${buttonIndex == index ? \"highlight-activity\" : \"\"}`,\n      onClick: () => toggleProject(activities[index], index),\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"activity\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, item.project_title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"activity-checkmark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, \"\\u2713\"));else return /*#__PURE__*/React.createElement(\"li\", {\n      className: `activity-list-item \n      ${buttonIndex == index ? \"highlight-activity\" : \"\"}`,\n      onClick: () => toggleProject(activities[index], index),\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"activity\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, item.project_title));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    classname: \"activity-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ProjectInfo, {\n    updateLocalProjectValue: updateLocalProjectValue,\n    index: buttonIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"activity-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, fields));\n};\n\nexport default Activities;","map":{"version":3,"sources":["/home/hans/dev/personlig/graveyardApp/client/src/components/Activities.js"],"names":["React","useState","useContext","Fragment","useCallback","useEffect","GlobalContext","ProjectContext","JsonActivities","cleanProjects","ProjectInfo","GlobalEdit","chosenConnection","checkMark","Activities","value","setValue","activities","setActivities","viewProject","setViewProject","buttonIndex","setButtonIndex","edit","setEdit","projectContainer","getProjectData","projArr","console","log","updateLocalProjectValue","item","toggleProject","activity","index","fetch","gy","id","then","response","json","sendData","cleaned","fields","map","date_completed","project_title"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useContext,\n  Fragment,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\n\nimport JsonActivities, { cleanProjects } from \"../utilities/JsonActivities\";\nimport ProjectInfo from \"./ProjectInfo\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\nimport { chosenConnection } from \"../utilities/Connections\";\nimport checkMark from \"../images/tick.png\";\n\nconst Activities = () => {\n  const { value, setValue } = useContext(GlobalContext);\n  const [activities, setActivities] = useState([]);\n  const { viewProject, setViewProject } = useContext(ProjectContext);\n  const [buttonIndex, setButtonIndex] = useState(null);\n  const { edit, setEdit } = useContext(GlobalEdit);\n\n  let projectContainer;\n\n  const getProjectData = useCallback((projArr) => {\n    projectContainer = projArr;\n    console.log(projectContainer);\n    return projArr;\n  });\n\n  const updateLocalProjectValue = useCallback((item, value) => {\n    item[\"percent_finished\"] = value;\n    console.log(item);\n  });\n\n  const toggleProject = (activity, index) => {\n    console.log(activity);\n    if (activity != viewProject) {\n      setViewProject(activity);\n      setButtonIndex(index);\n    } else {\n      setViewProject(null);\n      setButtonIndex(null);\n    }\n  };\n\n  useEffect(() => {\n    fetch(`${chosenConnection}/projects/${value.gy.id}`)\n      .then((response) => response.json())\n      .then((sendData) => getProjectData(sendData))\n      .then((cleaned) => setActivities(cleaned));\n  }, [value.gy.id || edit]);\n\n  const fields = activities.map((item, index) => {\n    if (item.date_completed)\n      return (\n        <li\n          className={`activity-list-item finished-project\n      ${buttonIndex == index ? \"highlight-activity\" : \"\"}`}\n          onClick={() => toggleProject(activities[index], index)}\n          key={index}\n        >\n          <p className=\"activity\">{item.project_title}</p>\n          <p className=\"activity-checkmark\">&#10003;</p>\n        </li>\n      );\n    else\n      return (\n        <li\n          className={`activity-list-item \n      ${buttonIndex == index ? \"highlight-activity\" : \"\"}`}\n          onClick={() => toggleProject(activities[index], index)}\n          key={index}\n        >\n          <p className=\"activity\">{item.project_title}</p>\n        </li>\n      );\n  });\n\n  return (\n    <div classname=\"activity-holder\">\n      <ProjectInfo\n        updateLocalProjectValue={updateLocalProjectValue}\n        index={buttonIndex}\n      />\n      <ul className=\"activity-list\">{fields}</ul>\n    </div>\n  );\n};\n\nexport default Activities;\n"]},"metadata":{},"sourceType":"module"}