{"ast":null,"code":"var _jsxFileName = \"/mnt/d/web/graveyardApp/client/src/components/Fields.js\";\nimport React, { useState, useContext, Fragment } from \"react\";\nimport MenuFieldButton from \"./MenuFieldButton\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { FieldActivities, fieldActivities } from \"../utilities/GraveyardInfo\";\nimport { ActivityViewContext } from \"../contexts/ActivityViewContext\";\n\nconst Fields = ({\n  fields\n}) => {\n  const {\n    value,\n    setValue\n  } = useContext(GlobalContext);\n  const {\n    selectedActivity,\n    setSelectedActivity\n  } = useContext(ActivityViewContext);\n  const [showList, setShowList] = useState(false);\n\n  const handleOnClick = item => {\n    setValue(prev => {\n      return { ...prev,\n        field: item\n      };\n    });\n  };\n\n  const handleActivitySelectorClick = () => {\n    setShowList(!showList);\n  };\n\n  const currentFields = fields.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: \"field-list-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MenuFieldButton, {\n    item: item,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  })));\n  const activityList = fieldActivities.map((item, index) => {\n    if (index < 5) {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: \"activity-selector-li\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: item.img,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }\n      }, item.value));\n    }\n  }); // Get degrees between each item, based on total items.\n\n  var angleSteps = 360 / $(\"#activity-selector-list\").length; // base angle to increment, which will rotate entire list.\n\n  var baseAngle = 0; // center of the circle, relative to parent <ul>\n\n  var center = 150; // distance to place each item from the center\n\n  var distance = 100;\n\n  function updateListPositions() {\n    // loop through each list item and place it on the circle based on it's angle\n    $(\"#activity-selector-list\").each(function (index, element) {\n      var angle = baseAngle + index * angleSteps;\n      var x = distance * Math.cos(angle * (Math.PI / 180));\n      var y = distance * Math.sin(angle * (Math.PI / 180));\n      $(element).css({\n        left: center + x,\n        top: center + y\n      });\n    });\n  } // set a timer to continually increment the base angle, which rotates the circle.\n  // this could easily be changed to increment the circle based on scroll delta\n\n\n  var stepInterval = setInterval(stepAngle, 25);\n\n  function stepAngle() {\n    baseAngle++; // update position as base angle changes\n\n    updateListPositions();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fields-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"fields-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, currentFields), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"activity-selector\",\n    onClick: handleActivitySelectorClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Visning\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"activity-selector-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: `activity-selector-list-container ${showList ? \"show-list\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"activity-selector-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, activityList)));\n};\n\nexport default Fields;","map":{"version":3,"sources":["/mnt/d/web/graveyardApp/client/src/components/Fields.js"],"names":["React","useState","useContext","Fragment","MenuFieldButton","GlobalContext","FieldActivities","fieldActivities","ActivityViewContext","Fields","fields","value","setValue","selectedActivity","setSelectedActivity","showList","setShowList","handleOnClick","item","prev","field","handleActivitySelectorClick","currentFields","map","index","activityList","img","angleSteps","$","length","baseAngle","center","distance","updateListPositions","each","element","angle","x","Math","cos","PI","y","sin","css","left","top","stepInterval","setInterval","stepAngle"],"mappings":"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","sourcesContent":["import React, { useState, useContext, Fragment } from \"react\";\n\nimport MenuFieldButton from \"./MenuFieldButton\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { FieldActivities, fieldActivities } from \"../utilities/GraveyardInfo\";\nimport { ActivityViewContext } from \"../contexts/ActivityViewContext\";\n\nconst Fields = ({ fields }) => {\n  const { value, setValue } = useContext(GlobalContext);\n  const { selectedActivity, setSelectedActivity } = useContext(\n    ActivityViewContext\n  );\n  const [showList, setShowList] = useState(false);\n\n  const handleOnClick = (item) => {\n    setValue((prev) => {\n      return { ...prev, field: item };\n    });\n  };\n\n  const handleActivitySelectorClick = () => {\n    setShowList(!showList);\n  };\n\n  const currentFields = fields.map((item, index) => (\n    <li className=\"field-list-item\">\n      <MenuFieldButton item={item} index={index} />\n    </li>\n  ));\n\n  const activityList = fieldActivities.map((item, index) => {\n    if (index < 5) {\n      return (\n        <li className=\"activity-selector-li\">\n          <img src={item.img} />\n          <h5>{item.value}</h5>\n        </li>\n      );\n    }\n  });\n\n  // Get degrees between each item, based on total items.\n  var angleSteps = 360 / $(\"#activity-selector-list\").length;\n  // base angle to increment, which will rotate entire list.\n  var baseAngle = 0;\n  // center of the circle, relative to parent <ul>\n  var center = 150;\n  // distance to place each item from the center\n  var distance = 100;\n\n  function updateListPositions() {\n    // loop through each list item and place it on the circle based on it's angle\n    $(\"#activity-selector-list\").each(function (index, element) {\n      var angle = baseAngle + index * angleSteps;\n      var x = distance * Math.cos(angle * (Math.PI / 180));\n      var y = distance * Math.sin(angle * (Math.PI / 180));\n      $(element).css({ left: center + x, top: center + y });\n    });\n  }\n\n  // set a timer to continually increment the base angle, which rotates the circle.\n  // this could easily be changed to increment the circle based on scroll delta\n\n  var stepInterval = setInterval(stepAngle, 25);\n\n  function stepAngle() {\n    baseAngle++;\n    // update position as base angle changes\n    updateListPositions();\n  }\n\n  return (\n    <div className=\"fields-box\">\n      <ul className=\"fields-list\">{currentFields}</ul>\n      <div className=\"activity-selector\" onClick={handleActivitySelectorClick}>\n        <h5>Visning</h5>\n        <div className=\"activity-selector-icon\"></div>\n      </div>\n      <div\n        className={`activity-selector-list-container ${\n          showList ? \"show-list\" : \"\"\n        }`}\n      >\n        <ul className=\"activity-selector-list\">{activityList}</ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Fields;\n"]},"metadata":{},"sourceType":"module"}