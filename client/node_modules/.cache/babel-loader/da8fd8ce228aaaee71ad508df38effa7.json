{"ast":null,"code":"var _jsxFileName = \"/Users/Hansi/Desktop/gardener/client/src/components/FieldButton.js\";\nimport React, { useState, useContext, Fragment, useEffect, memo, useCallback } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { FieldButtons } from \"../contexts/FieldButtons\";\nexport const FieldButton = React.memo(({\n  item,\n  index,\n  click,\n  toggleParentArray\n}) => {\n  const {\n    allClicked,\n    setAllClicked\n  } = useContext(FieldButtons);\n  const [active, SetActive] = useState(false);\n\n  const toggle = () => {\n    SetActive(!active);\n\n    if (allClicked == 2) {\n      setAllClicked(3);\n    }\n\n    toggleParentArray;\n  };\n\n  const toggleInactive = () => {\n    SetActive(!active);\n  };\n\n  const allToggled = () => {\n    if (allClicked == 2) SetActive(true);\n    if (allClicked == 1) SetActive(false);\n  };\n\n  useEffect(() => {\n    allToggled();\n  }, [allClicked]);\n  useEffect(() => {}, [active]);\n  if (active) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"round-button-work-active\",\n    onClick: () => {\n      toggle();\n      toggleParentArray();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, item);else return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"round-button-work-inactive\",\n    onClick: toggleInactive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, item);\n});","map":{"version":3,"sources":["/Users/Hansi/Desktop/gardener/client/src/components/FieldButton.js"],"names":["React","useState","useContext","Fragment","useEffect","memo","useCallback","GlobalContext","FieldButtons","FieldButton","item","index","click","toggleParentArray","allClicked","setAllClicked","active","SetActive","toggle","toggleInactive","allToggled"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,IALF,EAMEC,WANF,QAOO,OAPP;AASA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,MAAMC,WAAW,GAAGT,KAAK,CAACK,IAAN,CAAW,CAAC;AAAEK,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,KAA+C;AACnF,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAgCb,UAAU,CAACM,YAAD,CAAhD;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMiB,MAAM,GAAG,MAAM;AACnBD,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;;AACA,QAAIF,UAAU,IAAI,CAAlB,EAAqB;AACnBC,MAAAA,aAAa,CAAC,CAAD,CAAb;AACD;;AACDF,IAAAA,iBAAiB;AAClB,GAND;;AAQA,QAAMM,cAAc,GAAG,MAAM;AAC3BF,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAFD;;AAIA,QAAMI,UAAU,GAAG,MAAM;AACvB,QAAIN,UAAU,IAAI,CAAlB,EAAqBG,SAAS,CAAC,IAAD,CAAT;AACrB,QAAIH,UAAU,IAAI,CAAlB,EAAqBG,SAAS,CAAC,KAAD,CAAT;AACtB,GAHD;;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACN,UAAD,CAFM,CAAT;AAIAV,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACY,MAAD,CAAX,CAAT;AAEA,MAAIA,MAAJ,EACE,oBACE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAA0C,IAAA,OAAO,EAAE,MAAM;AAACE,MAAAA,MAAM;AAAIL,MAAAA,iBAAiB;AAAG,KAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IADH,CADF,CADF,KAOE,oBACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAA4C,IAAA,OAAO,EAAES,cAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,IADH,CADF;AAKH,CAvC0B,CAApB","sourcesContent":["import React, {\n  useState,\n  useContext,\n  Fragment,\n  useEffect,\n  memo,\n  useCallback,\n} from \"react\";\n\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { FieldButtons } from \"../contexts/FieldButtons\";\n\nexport const FieldButton = React.memo(({ item, index, click, toggleParentArray }) => {\n  const { allClicked, setAllClicked } = useContext(FieldButtons);\n  const [active, SetActive] = useState(false);\n\n  const toggle = () => {\n    SetActive(!active);\n    if (allClicked == 2) {\n      setAllClicked(3);\n    }\n    toggleParentArray;\n  };\n\n  const toggleInactive = () => {\n    SetActive(!active);\n  };\n\n  const allToggled = () => {\n    if (allClicked == 2) SetActive(true);\n    if (allClicked == 1) SetActive(false);\n  };\n\n  useEffect(() => {\n    allToggled();\n  }, [allClicked]);\n\n  useEffect(() => {}, [active]);\n\n  if (active)\n    return (\n      <div className=\"round-button-work-active\" onClick={() => {toggle(); toggleParentArray()}}>\n        {item}\n      </div>\n    );\n  else\n    return (\n      <div className=\"round-button-work-inactive\" onClick={toggleInactive}>\n        {item}\n      </div>\n    );\n});\n"]},"metadata":{},"sourceType":"module"}