{"ast":null,"code":"var _jsxFileName = \"/mnt/d/web/graveyardApp/client/src/components/ProgressBar.js\";\nimport React, { useState, useContext, Fragment, useEffect } from \"react\";\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\nimport JsonActivities, { cleanComments } from \"../utilities/JsonActivities\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\nimport { ProgressContext } from \"../contexts/ProgressContext\";\nexport const ProgressBar = ({\n  done\n}) => {\n  const {\n    viewProject,\n    setViewProject\n  } = useContext(ProjectContext);\n  const {\n    value,\n    setValue\n  } = useContext(GlobalContext);\n  const {\n    temporaryProgress,\n    setTemporaryProgress\n  } = useContext(ProgressContext);\n  let progress;\n\n  if (temporaryProgress != null && temporaryProgress > done) {\n    progress = temporaryProgress;\n  } else {\n    progress = done;\n  }\n\n  useEffect(() => {}, [temporaryProgress]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-done\",\n    style: progress < 10 ? {\n      width: `${progress}%`,\n      color: \"black\"\n    } : {\n      width: `${progress}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, progress, \"%\")));\n};","map":{"version":3,"sources":["/mnt/d/web/graveyardApp/client/src/components/ProgressBar.js"],"names":["React","useState","useContext","Fragment","useEffect","GlobalContext","GlobalEdit","JsonActivities","cleanComments","ProjectContext","ProgressContext","ProgressBar","done","viewProject","setViewProject","value","setValue","temporaryProgress","setTemporaryProgress","progress","width","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,QAAtC,EAAgDC,SAAhD,QAAiE,OAAjE;AAEA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA,OAAOC,cAAP,IAAyBC,aAAzB,QAA8C,6BAA9C;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACvC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCZ,UAAU,CAACO,cAAD,CAAlD;AACA,QAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBd,UAAU,CAACG,aAAD,CAAtC;AACA,QAAM;AAAEY,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAA8ChB,UAAU,CAC5DQ,eAD4D,CAA9D;AAIA,MAAIS,QAAJ;;AAEA,MAAIF,iBAAiB,IAAI,IAArB,IAA6BA,iBAAiB,GAAGL,IAArD,EAA2D;AACzDO,IAAAA,QAAQ,GAAGF,iBAAX;AACD,GAFD,MAEO;AACLE,IAAAA,QAAQ,GAAGP,IAAX;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACa,iBAAD,CAAX,CAAT;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,KAAK,EACHE,QAAQ,GAAG,EAAX,GACI;AAAEC,MAAAA,KAAK,EAAG,GAAED,QAAS,GAArB;AAAyBE,MAAAA,KAAK,EAAE;AAAhC,KADJ,GAEI;AAAED,MAAAA,KAAK,EAAG,GAAED,QAAS;AAArB,KALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGA,QARH,MADF,CADF,CADF;AAgBD,CAjCM","sourcesContent":["import React, { useState, useContext, Fragment, useEffect } from \"react\";\n\nimport { GlobalContext } from \"../contexts/GlobalContext\";\nimport { GlobalEdit } from \"../contexts/GlobalEdit\";\n\nimport JsonActivities, { cleanComments } from \"../utilities/JsonActivities\";\nimport { ProjectContext } from \"../contexts/ProjectContext\";\nimport { ProgressContext } from \"../contexts/ProgressContext\";\n\nexport const ProgressBar = ({ done }) => {\n  const { viewProject, setViewProject } = useContext(ProjectContext);\n  const { value, setValue } = useContext(GlobalContext);\n  const { temporaryProgress, setTemporaryProgress } = useContext(\n    ProgressContext\n  );\n\n  let progress;\n\n  if (temporaryProgress != null && temporaryProgress > done) {\n    progress = temporaryProgress;\n  } else {\n    progress = done;\n  }\n\n  useEffect(() => {}, [temporaryProgress]);\n\n  return (\n    <div className=\"progress-container\">\n      <div className=\"progress\">\n        <div\n          className=\"progress-done\"\n          style={\n            progress < 10\n              ? { width: `${progress}%`, color: \"black\" }\n              : { width: `${progress}%` }\n          }\n        >\n          {progress}%\n        </div>\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}